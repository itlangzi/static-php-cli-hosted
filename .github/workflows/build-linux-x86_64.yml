name: Build PHP on x86_64 linux-gun

on:
  workflow_dispatch:
    inputs:
      version:
        required: true
        description: php version to compile
        default: '8.1'
        type: choice
        options:
          - '8.3'
          - '8.2'
          - '8.1'
          - '8.0'
      os:
        required: true
        description: Run on os
        default: 'ubuntu-latest'
        type: choice
        options:
          - 'ubuntu-latest'
          - 'ubuntu-24.04'
          - 'ubuntu-22.04'
      build-targets:
        description: "build target (comma separated, can be: cli,micro,fpm,embed,frankenphp)"
        required: true
        type: string
        default: 'cli,micro,fpm'
      extensions:
        description: extensions to compile (comma separated)
        default: apcu,bcmath,calendar,ctype,curl,dba,dom,exif,fileinfo,filter,gd,iconv,intl,mbregex,mbstring,mysqli,mysqlnd,opcache,openssl,pcntl,pdo,pdo_mysql,pdo_pgsql,pdo_sqlite,pgsql,phar,posix,readline,redis,session,simplexml,sockets,sodium,sqlite3,tokenizer,uuid,xml,xmlreader,xmlwriter,xsl,zip,zlib
        required: true
        type: string
      libs:
        description: libs to compile (comma separated)
        default: libavif
        type: string
      prefer-pre-built:
        description: prefer pre-built binaries (reduce build time)
        type: boolean
        default: true
      zts:
        description: enable thread safety (zts)
        type: boolean
        default: false
      debug:
        description: enable debug logs
        type: boolean
        default: true
      upx:
        description: enable upx
        type: boolean
        default: true

jobs:
  build:
    name: Build PHP v${{ inputs.version }} on Linux x86_64
    runs-on: ${{ inputs.os }}
    steps:
      - name: Checkout repository
        if: github.repository != 'crazywhalecc/static-php-cli'
        uses: actions/checkout@v4
        with:
          repository: crazywhalecc/static-php-cli
          ref: main

      - name: Generate hashed key for download cache
        run: |
          INPUT_HASH=$(echo "${{ runner.os }}-${{ inputs.version }}-${{ inputs.extensions }}-${{ inputs.libs }}-${{ inputs.build-targets }}" | sha256sum | awk '{print $1}')
          echo "INPUT_HASH=${INPUT_HASH}" >> $GITHUB_ENV

      # Cache downloaded source
      - name: Cache downloaded source
        id: cache-download
        uses: actions/cache@v4
        with:
          path: downloads
          key: php-${{ env.INPUT_HASH }}

      - name: "Process env"
        id: process-env
        shell: bash
        run: |
          set -euo pipefail
          echo "CMD=./bin/spc-gnu-docker" >> $GITHUB_ENV

          # Build targets
          IFS=',' read -ra BUILD_TARGETS <<< "${{ inputs.build-targets }}"
          for target in "${BUILD_TARGETS[@]}"; do
            case $target in
              cli) echo "SPC_BUILD_CLI=--build-cli" >> $GITHUB_ENV ;;
              micro) echo "SPC_BUILD_MICRO=--build-micro" >> $GITHUB_ENV ;;
              fpm) echo "SPC_BUILD_FPM=--build-fpm" >> $GITHUB_ENV ;;
              embed) echo "SPC_BUILD_EMBED=--build-embed" >> $GITHUB_ENV ;;
              frankenphp) echo "SPC_BUILD_FRANKENPHP=--build-frankenphp" >> $GITHUB_ENV ;;
              # 未知目标仅警告，不触发--build-all
              *) echo "Warning: Unknown build target '$target', skipped" >&2 ;;
            esac
          done

          if [[ "${{ inputs.debug }}" = "true" ]]; then
            echo "SPC_BUILD_DEBUG=--debug" >> $GITHUB_ENV
          fi
          if [[ "${{ inputs.prefer-pre-built }}" = "true" ]]; then
            echo "SPC_PRE_BUILT=--prefer-pre-built" >> $GITHUB_ENV
          fi
          if [[ "${{ inputs.zts }}" = "true" ]]; then
            echo "SPC_ENABLE_ZTS=--enable-zts" >> $GITHUB_ENV
          fi
          if [[ -n "${{ inputs.libs }}" ]]; then
            echo "SPC_WITH_LIBS=--with-libs=${{ inputs.libs }}" >> $GITHUB_ENV
          fi

      - name: Check extensions and libs and try repair
        run: ${{ env.CMD }} doctor --auto-fix

      # If there's no dependencies cache, fetch sources, with or without debug
      - name: Download extensions and libs
        if: steps.cache-download.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail
          CACHE_API_EXEC=yes 
          ${{ env.CMD }} download \
            --with-php=${{ inputs.version }} \
            --for-extensions=${{ inputs.extensions }} \
            ${{ env.SPC_BUILD_DEBUG }} \
            ${{ env.SPC_PRE_BUILT }} \
            --retry=5

      # Run build command
      - name: Building
        run: |
          set -euo pipefail
          UPX=""
          if [[ "${{ inputs.upx }}" = "true" ]]; then
            ${{ env.CMD }} install-pkg upx
            UPX=--with-upx-pack
          fi

          ${{ env.CMD }} build ${{ inputs.extensions }} \
            ${{ env.SPC_ENABLE_ZTS }} \
            ${{ env.SPC_WITH_LIBS }} \
            ${{ env.SPC_BUILD_DEBUG }} \
            ${{ env.SPC_BUILD_CLI }} \
            ${{ env.SPC_BUILD_MICRO }} \
            ${{ env.SPC_BUILD_FPM }} \
            ${{ env.SPC_BUILD_EMBED }} \
            ${{ env.SPC_BUILD_FRANKENPHP }} \
            $UPX

          # Copy out from buildroot, because docker build has different permission
          mkdir -p tmp_dist/
          [ -f "buildroot/bin/php" ] && cp buildroot/bin/php tmp_dist/                # cli
          [ -f "buildroot/bin/micro.sfx" ] && cp buildroot/bin/micro.sfx tmp_dist/    # micro
          [ -f "buildroot/bin/php-fpm" ] && cp buildroot/bin/php-fpm tmp_dist/        # fpm
          [ -f "buildroot/bin/php-embed" ] && cp buildroot/bin/php-embed tmp_dist/    # embed
          [ -f "buildroot/bin/frankenphp" ] && cp buildroot/bin/frankenphp tmp_dist/  # frankenphp
          [ -f "buildroot/build-extensions.json" ] && cp buildroot/build-extensions.json tmp_dist/
          [ -f "buildroot/build-libraries.json" ] && cp buildroot/build-libraries.json tmp_dist/

      - name: "Upload Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: php-${{ inputs.version }}-${{ inputs.os }}-x86_64
          path: tmp_dist/
          if-no-files-found: error
